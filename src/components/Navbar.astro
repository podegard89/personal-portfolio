---
import type { MarkdownInstance } from "astro";
interface Props {
  allNavItems: MarkdownInstance<Record<string, any>>[];
  path: string;
}

const { allNavItems, path } = Astro.props;
---

<nav class=".nav">
  <div class="nav__list">
    {
      allNavItems.map((item) => {
        const isActive =
          path === item.frontmatter.href ||
          (path.includes(item.frontmatter.href) &&
            item.frontmatter.href !== "/");
        return (
          <div
            class="nav__list__item"
            style={{
              background: isActive ? "rgba(var(--accent-light))" : "",
            }}
          >
            <a href={item.frontmatter.href}>{item.frontmatter.title} </a>
          </div>
        );
      })
    }
  </div>
</nav>

<style>
  :root {
    --nav-item-size: clamp(100px, 10vw, 140px);
    --nav-item-fs: clamp(1rem, 1.5vw, 1.3rem);
  }
  /* Reset some default styles */
  .nav {
    display: flex;
    justify-content: center;
    border: 2px solid transparent; /* Add a transparent border */
    border-radius: 8px; /* Set border radius to 8 pixels */
    /* padding: 1rem;  */
    transition: border-color 0.3s;
    /* margin: 0 auto; */
    font-family: "VulfMonoDemo", "sans-serif";
    widows: 100vh;
  }

  .nav-container {
    background-color: var(--accent-light);
    /* position: relative; */
    z-index: 99;
    /* background: #008080; */
    position: relative;
    /* top: 1.5rem;
  padding: 1rem; */
  }

  /* .nav-container.sticky {
  position: fixed;
} */

  .pointer {
    position: relative;
    left: 50%;
    bottom: 100%;
    width: 0;
    height: 0;
    border-left: 20px solid transparent; /* Adjust the size of the triangle */
    border-right: 20px solid transparent; /* Adjust the size of the triangle */
    border-top: 30px solid rgba(var(--accent-light)); /* Color of the pointer, should match the indicator background color */
    transform: translateX(-50%);
    /* margin-bottom: 0.3rem; */
  }

  .nav__list {
    display: flex;
    /* flex-direction: column; */
    gap: 1rem;
    /* overflow: hidden; */
  }

  .nav__list__item {
    list-style: none;
    display: flex;
    justify-content: center;
    padding: 1px;
    background: linear-gradient(rgba(var(--accent)), rgba(var(--accent-light)));
    background-size: 400%;
    background-position: 100%;
    transition: background-position 0.2s ease;
    z-index: 1;
    position: relative;
    border-radius: 50%;
    width: var(--nav-item-size);
    height: var(--nav-item-size);
    border: #ffa500 2px solid;
    color: white;
  }

  .nav__list__item::before {
    border-radius: 50%;
    position: absolute;
    content: "";
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background-image: linear-gradient(
      to top,
      rgba(var(--accent-light)),
      rgba(var(--accent-light))
    );
    z-index: -1;
    transition: opacity 0.2s linear;
    opacity: 0;
    box-shadow:
      rgba(50, 50, 93, 0.25) 0px 30px 60px -12px inset,
      rgba(0, 0, 0, 0.3) 0px 18px 36px -18px inset;
  }

  .nav__list__item:hover::before {
    opacity: 1;
  }

  .nav__list__item > a {
    /* Add equal width and height to create a perfect square */
    width: var(--nav-item-size);
    height: var(--nav-item-size);
    text-decoration: none;
    display: flex;
    flex-direction: column; /* Center content vertically */
    align-items: center; /* Center content horizontally */
    justify-content: center;
    transition: color 0.2s ease;
    text-align: center;
    font-size: var(--nav-item-fs);
    color: inherit;
    font-family: "VulfMonoDemo", "sans-serif";
  }

  /* @media only screen and (max-width: 768px) {
    .nav__list__item {
      text-decoration: none;
      word-spacing: -0.25rem;
      color: white;
      margin: 0 15px;
      position: relative;
      transition:
        color 0.3s,
        border-color 0.3s;
    }
  } */
</style>
